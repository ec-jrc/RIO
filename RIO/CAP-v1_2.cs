//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=4.6.1055.0.
// 
namespace JRC.CAP
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Diagnostics;
    using System.IO;
    using System.Xml.Serialization;


    /// <summary>
    /// The container for all component parts of the alert message.
    /// MUST include the xmlns attribute referencing the CAP URN as the namespace, e.g.:
    /// <example>
    /// <![CDATA[
    ///     <cap:alert xmlns:cap="urn:oasis:names:tc:emergency:cap:1.2">
    ///         [sub-elements]
    ///     </cap:alert>
    /// ]]>
    /// </example>
    /// In addition to the specified sub-elements, MAY contain one or more &lt;info&gt; blocks.
    /// It is described in <see href="https://docs.oasis-open.org/emergency/cap/v1.2/CAP-v1.2-os.html"/>.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:oasis:names:tc:emergency:cap:1.2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "urn:oasis:names:tc:emergency:cap:1.2", IsNullable = false)]
    public partial class alert
    {

        private string identifierField;

        private string senderField;

        private System.DateTime sentField;

        [JsonConverter(typeof(StringEnumConverter))]
        private alertStatus statusField;

        [JsonConverter(typeof(StringEnumConverter))]
        private alertMsgType msgTypeField;

        private string sourceField;

        [JsonConverter(typeof(StringEnumConverter))]
        private alertScope scopeField;

        private string restrictionField;

        private string addressesField;

        private string[] codeField;

        private string noteField;

        private string referencesField;

        private string incidentsField;

        private alertInfo[] infoField;

        private static XmlSerializer capParser = new XmlSerializer(typeof(alert));

        /// <summary>
        /// The identifier of the alert message (REQUIRED)
        /// <list type="number">
        /// <item>A number or string uniquely identifying this message, assigned by the sender.</item>
        /// <item>MUST NOT include spaces, commas or restricted characters (&lt; and &amp;).</item>
        /// </list>
        /// </summary>
        [System.Xml.Serialization.XmlElement(IsNullable = false)]
        public string identifier
        {
            get
            {
                return this.identifierField;
            }
            set
            {
                this.identifierField = value;
            }
        }

        /// <summary>
        /// The identifier of the sender of the alert message (REQUIRED).
        /// <list type="number">
        /// <item>Identifies the originator of this alert. Guaranteed by assigner to be unique globally; e.g., may be based on an Internet domain name.</item>
        /// <item>MUST NOT include spaces, commas or restricted characters (&lt; and &amp;).</item>
        /// </list>
        /// </summary>
        [System.Xml.Serialization.XmlElement(IsNullable = false)]
        public string sender
        {
            get
            {
                return this.senderField;
            }
            set
            {
                this.senderField = value;
            }
        }

        /// <summary>
        /// The time and date of the origination of the alert message (REQUIRED).
        /// <list type="number">
        /// <item>The date and time SHALL be represented in the DateTime Data Type (See Implementation Notes) format (e.g., "2002-05-24T16:49:00-07:00" for 24 May 2002 at 16:49 PDT).</item>
        /// <item>Alphabetic timezone designators such as “Z” MUST NOT be used.  The timezone for UTC MUST be represented as “-00:00”.</item>
        /// </list>
        /// </summary>
        [XmlIgnore]
        public System.DateTime sent
        {
            get
            {
                return this.sentField;
            }
            set
            {
                this.sentField = value;
            }
        }

        /// <summary>
        /// The time and date of the origination of the alert message in string format, to be sure of
        /// the format used.
        /// </summary>
        [XmlElement("sent")]
        public string sentDateString
        {
            get
            {
                return this.sent != System.DateTime.MinValue ?
                    (this.sent.Kind == System.DateTimeKind.Utc ? this.sent.ToString("yyyy-MM-ddTHH:mm:ss-00:00") : this.sent.ToString("yyyy-MM-ddTHH:mm:sszzz")) : null;
            }
            set
            {
                this.sent = System.DateTime.Parse(value);
            }
        }

        /// <summary>
        /// The code denoting the appropriate handling of the alert message (REQUIRED). Refer to
        /// <seealso cref="alertStatus"/> for the possible values.
        /// </summary>
        public alertStatus status
        {
            get
            {
                return this.statusField;
            }
            set
            {
                this.statusField = value;
            }
        }
        /// <summary>
        /// The code denoting the nature of the alert message (REQUIRED). Refer to
        /// <seealso cref="alertMsgType"/> for the possible values.
        /// </summary>
        public alertMsgType msgType
        {
            get
            {
                return this.msgTypeField;
            }
            set
            {
                this.msgTypeField = value;
            }
        }

        /// <summary>
        /// The text identifying the source of the alert message (OPTIONAL).
        /// The particular source of this alert; e.g., an operator or a specific device.
        /// </summary>
        public string source
        {
            get
            {
                return this.sourceField;
            }
            set
            {
                this.sourceField = value;
            }
        }

        /// <summary>
        /// The code denoting the intended distribution of the alert message (REQUIRED). Refer to
        /// <seealso cref="alertScope"/> for the possible values.
        /// </summary>
        public alertScope scope
        {
            get
            {
                return this.scopeField;
            }
            set
            {
                this.scopeField = value;
            }
        }

        /// <summary>
        /// The text describing the rule for limiting distribution of the restricted alert message (CONDITIONAL).
        /// Used when <see cref="alert.scope"/> value is <see cref="alertScope.Restricted"/>.
        /// </summary>
        public string restriction
        {
            get
            {
                return this.restrictionField;
            }
            set
            {
                this.restrictionField = value;
            }
        }

        /// <summary>
        /// The group listing of intended recipients of the alert message (CONDITIONAL).
        /// <list type="number">
        /// <item>Required when <see cref="alert.scope"/> is <see cref="alertScope.Private"/>,
        /// optional when <see cref="alert.scope"/> is <see cref="alertScope.Public"/>
        /// or <see cref="alertScope.Restricted"/>.</item>
        /// <item>Each recipient SHALL be identified by an identifier or an address.</item>
        /// <item>Multiple space-delimited addresses MAY be included.
        /// Addresses including whitespace MUST be enclosed in double-quotes.</item>
        /// </list>
        /// </summary>
        public string addresses
        {
            get
            {
                return this.addressesField;
            }
            set
            {
                this.addressesField = value;
            }
        }

        /// <summary>
        /// The code denoting the special handling of the alert message (OPTIONAL).
        /// <list type="number">
        /// <item>Any user-defined flag or special code used to flag the alert message for special handling.</item>
        /// <item>Multiple instances MAY occur.</item>
        /// </list>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("code")]
        public string[] code
        {
            get
            {
                return this.codeField;
            }
            set
            {
                this.codeField = value;
            }
        }

        /// <summary>
        /// The text describing the purpose or significance of the alert message (OPTIONAL).
        /// The message note is primarily intended for use with <see cref="alertStatus.Exercise"/>
        /// and <see cref="alertMsgType.Error"/>.
        /// </summary>
        public string note
        {
            get
            {
                return this.noteField;
            }
            set
            {
                this.noteField = value;
            }
        }

        /// <summary>
        /// The group listing identifying earlier message(s) referenced by the alert message (OPTIONAL).
        /// <list type="number">
        /// <item>The extended message identifier(s) (in the form sender,identifier,sent) of an earlier
        /// CAP message or messages referenced by this one.</item>
        /// <item>If multiple messages are referenced, they SHALL be separated by whitespace.</item>
        /// </list>
        /// </summary>
        public string references
        {
            get
            {
                return this.referencesField;
            }
            set
            {
                this.referencesField = value;
            }
        }

        /// <summary>
        /// The group listing naming the referent incident(s) of the alert message (OPTIONAL).
        /// <list type="number">
        /// <item>Used to collate multiple messages referring to different aspects of the same incident.</item>
        /// <item>If multiple incident identifiers are referenced, they SHALL be separated by whitespace.  Incident names including whitespace SHALL be surrounded by double-quotes.</item>
        /// </list>
        /// </summary>
        public string incidents
        {
            get
            {
                return this.incidentsField;
            }
            set
            {
                this.incidentsField = value;
            }
        }

        /// <summary>
        /// A collection of <see cref="alertInfo"/> containing information about the <see cref="alert"/>,
        /// such as geographic informations.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("info")]
        public alertInfo[] info
        {
            get
            {
                return this.infoField;
            }
            set
            {
                this.infoField = value;
            }
        }

        /// <summary>
        /// Use this static method to parse a JSON containing string into an <see cref="alert"/>.
        /// </summary>
        /// <param name="text">A string containing a JSON serialized <see cref="alert"/>.</param>
        /// <returns>The parseed <see cref="alert"/> or null, in case of error.</returns>
        public static alert ParseJson(string text)
        {
            try
            {
                return JsonConvert.DeserializeObject(text, typeof(alert)) as alert;
            }
            catch
            {
                return null;
            }
        }

        /// <summary>
        /// Use this static method to parse an XML containing string into an <see cref="alert"/>.
        /// </summary>
        /// <param name="text">A string containing an XML serialized <see cref="alert"/>.</param>
        /// <returns>The parseed <see cref="alert"/> or null, in case of error.</returns>
        public static alert ParseXml(string text)
        {
            try
            {
                using (TextReader reader = new StringReader(text))
                    return capParser.Deserialize(reader) as alert;
            }
            catch
            {
                return null;
            }
        }
    }

    /// <summary>
    /// Possible values for the status attribute of the alert, <see cref="alert.status"/> plus the value "Undefined"
    /// for uninitialized values.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:oasis:names:tc:emergency:cap:1.2")]
    [JsonConverter(typeof(StringEnumConverter))]
    public enum alertStatus
    {
        /// <summary>
        /// When unitialized, the information gets this value.
        /// </summary>
        Undefined,
        /// <summary>
        /// Actionable by all targeted recipients
        /// </summary>
        Actual,
        /// <summary>
        /// Actionable only by designated exercise participants; exercise identifier SHOULD appear in <see cref="alert.note"/>
        /// </summary>
        Exercise,
        /// <summary>
        /// For messages that support alert network internal functions
        /// </summary>
        System,
        /// <summary>
        /// Technical testing only, all recipients disregard
        /// </summary>
        Test,
        /// <summary>
        /// A preliminary template or draft, not actionable in its current form
        /// </summary>
        Draft,
    }

    /// <summary>
    /// Possible values for the <see cref="alert.msgType"/> attribute, plus the undefined value assumed by uninitialized content.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:oasis:names:tc:emergency:cap:1.2")]
    [JsonConverter(typeof(StringEnumConverter))]
    public enum alertMsgType
    {
        /// <summary>
        /// When unitialized, the information gets this value.
        /// </summary>
        Undefined,
        /// <summary>
        /// Initial information requiring attention by targeted recipients
        /// </summary>
        Alert,
        /// <summary>
        /// Updates and supercedes the earlier message(s) identified in <see cref="alert.references"/>
        /// </summary>
        Update,
        /// <summary>
        /// Cancels the earlier message(s) identified in <see cref="alert.references"/>
        /// </summary>
        Cancel,
        /// <summary>
        /// Acknowledges receipt and acceptance of the message(s) identified in <see cref="alert.references"/>
        /// </summary>
        Ack,
        /// <summary>
        /// Indicates rejection of the message(s) identified in <see cref="alert.references"/>;
        /// explanation SHOULD appear in <see cref="alert.note"/>
        /// </summary>
        Error,
    }

    /// <summary>
    /// The code denoting the intended distribution of the alert message (REQUIRED).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:oasis:names:tc:emergency:cap:1.2")]
    [JsonConverter(typeof(StringEnumConverter))]
    public enum alertScope
    {
        /// <summary>
        /// When unitialized, the information gets this value.
        /// </summary>
        Undefined,
        /// <summary>
        /// For general dissemination to unrestricted audiences.
        /// </summary>
        Public,
        /// <summary>
        /// For dissemination only to users with a known operational requirement, see <see cref="alert.restriction"/>.
        /// </summary>
        Restricted,
        /// <summary>
        /// For dissemination only to specified <see cref="alert.addresses"/>.
        /// </summary>
        Private,
    }

    /// <summary>
    /// The container for all component parts of the info sub-element of the alert message (OPTIONAL).
    /// <list type="number">
    /// <item>Multiple occurrences are permitted within a single <see cref="alert"/>. If targeting of
    /// multiple <see cref="alertInfo"/> blocks in the same language overlaps, information in later
    /// blocks may expand but may not override the corresponding values in earlier ones. Each set of
    /// <see cref="alertInfo"/> blocks containing the same language identifier SHALL be treated as a separate sequence.</item>
    /// <item>In addition to the specified sub-elements, MAY contain one or more <see cref="alertInfoResource"/>
    /// blocks and/or one or more <see cref="alertInfoArea"/> blocks.</item>
    /// </list>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:oasis:names:tc:emergency:cap:1.2")]
    public partial class alertInfo
    {
        private string languageField = "en-US";

        private alertInfoCategory[] categoryField;

        private string eventField;

        private alertInfoResponseType[] responseTypeField;

        private alertInfoUrgency urgencyField;

        private alertInfoSeverity severityField;

        private alertInfoCertainty certaintyField;

        private string audienceField;

        private alertInfoEventCode[] eventCodeField;

        private System.DateTime effectiveField;

        private System.DateTime onsetField;

        private System.DateTime expiresField;

        private string senderNameField;

        private string headlineField;

        private string descriptionField;

        private string instructionField;

        private string webField;

        private string contactField;

        private alertInfoParameter[] parameterField;

        private alertInfoResource[] resourceField;

        private alertInfoArea[] areaField;

        /// <summary>
        /// The code denoting the language of the info sub-element of the alert message (OPTIONAL).
        /// <list type="number">
        /// <item>Code Values: Natural language identifier per [RFC 3066].</item>
        /// <item>If not present, an implicit default value of "en-US" SHALL be assumed.</item>
        /// <item>A null value in this element SHALL be considered equivalent to “en-US.”</item>
        /// </list>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType = "language")]
        //[System.ComponentModel.DefaultValueAttribute("en-US")]
        public string language
        {
            get
            {
                return this.languageField;
            }
            set
            {
                this.languageField = value;
            }
        }

        /// <summary>
        /// The code denoting the category of the subject event of the alert message (REQUIRED).
        /// Multiple instances MAY occur within an <see cref="alertInfo"/> block.
        /// <see cref="alertInfoCategory"/>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("category")]
        public alertInfoCategory[] category
        {
            get
            {
                return this.categoryField;
            }
            set
            {
                this.categoryField = value;
            }
        }

        /// <summary>
        /// The text denoting the type of the subject event of the alert message (REQUIRED).
        /// </summary>
        public string @event
        {
            get
            {
                return this.eventField;
            }
            set
            {
                this.eventField = value;
            }
        }

        /// <summary>
        /// The code denoting the type of action recommended for the target audience (OPTIONAL).
        /// Multiple instances MAY occur within an <see cref="alertInfo"/> block.
        /// <see cref="alertInfoResponseType"/>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("responseType")]
        public alertInfoResponseType[] responseType
        {
            get
            {
                return this.responseTypeField;
            }
            set
            {
                this.responseTypeField = value;
            }
        }

        /// <summary>
        /// The code denoting the urgency of the subject event of the alert message (REQUIRED).
        /// The <see cref="alertInfo.urgency"/>, <see cref="alertInfo.severity"/>,
        /// and <see cref="alertInfo.certainty"/> elements collectively distinguish less emphatic from more emphatic messages.
        /// <see cref="alertInfoUrgency"/>
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public alertInfoUrgency urgency
        {
            get
            {
                return this.urgencyField;
            }
            set
            {
                this.urgencyField = value;
            }
        }

        /// <summary>
        /// The code denoting the severity of the subject event of the alert message (REQUIRED).
        /// The <see cref="alertInfo.urgency"/>, <see cref="alertInfo.severity"/>,
        /// and <see cref="alertInfo.certainty"/> elements collectively distinguish less emphatic from more emphatic messages.
        /// <see cref="alertInfoSeverity"/>
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public alertInfoSeverity severity
        {
            get
            {
                return this.severityField;
            }
            set
            {
                this.severityField = value;
            }
        }

        /// <summary>
        /// The code denoting the certainty of the subject event of the alert message (REQUIRED).
        /// The <see cref="alertInfo.urgency"/>, <see cref="alertInfo.severity"/>,
        /// and <see cref="alertInfo.certainty"/> elements collectively distinguish less emphatic from more emphatic messages.
        /// <see cref="alertInfoCertainty"/>
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public alertInfoCertainty certainty
        {
            get
            {
                return this.certaintyField;
            }
            set
            {
                this.certaintyField = value;
            }
        }

        /// <summary>
        /// The text describing the intended audience of the alert message (OPTIONAL).
        /// </summary>
        public string audience
        {
            get
            {
                return this.audienceField;
            }
            set
            {
                this.audienceField = value;
            }
        }

        /// <summary>
        /// A system-specific code identifying the event type of the alert message (OPTIONAL).
        /// </summary>
        /// <remarks>
        /// <list type="number">
        /// <item>Any system-specific code for event typing, in the form:
        /// <![CDATA[
        /// <eventCode>
        ///     <valueName>valueName</valueName>
        ///     <value>value</value>
        /// </eventCode>
        /// ]]>
        /// where the content of “valueName” is a user-assigned string designating the domain
        /// of the code, and the content of “value” is a string (which may represent a number)
        /// denoting the value itself(e.g., valueName = "SAME" and value = "CEM").</item>
        /// <item>Values of “valueName” that are acronyms SHOULD be represented in all capital
        /// letters without periods (e.g., SAME, FIPS, ZIP).</item>
        /// <item>Multiple instances MAY occur within an <see cref="alertInfo"/> block.</item>
        /// </list>
        /// <see cref="alertInfoEventCode"/>
        /// </remarks>
        [System.Xml.Serialization.XmlElementAttribute("eventCode")]
        public alertInfoEventCode[] eventCode
        {
            get
            {
                return this.eventCodeField;
            }
            set
            {
                this.eventCodeField = value;
            }
        }

        /// <summary>
        /// The effective time of the information of the alert message (OPTIONAL).
        /// </summary>
        /// <remarks>
        /// <list type="number">
        /// <item>The date and time SHALL be represented in the <see cref="System.DateTime"/> Data Type
        /// format (e.g., “2002-05-24T16:49:00-07:00” for 24 May 2002 at 16: 49 PDT).</item>
        /// <item>Alphabetic timezone designators such as “Z” MUST NOT be used.  The timezone for UTC MUST be represented as “-00:00”.</item>
        /// <item>If this item is not included, the effective time SHALL be assumed to be the same as in <see cref="alert.sent"/>.</item>
        /// </list>
        /// </remarks>
        public System.DateTime effective
        {
            get
            {
                return this.effectiveField;
            }
            set
            {
                this.effectiveField = value;
            }
        }

        /// <summary>
        /// The expected time of the beginning of the subject event of the alert message (OPTIONAL).
        /// </summary>
        /// <remarks>
        /// <list type="number">
        /// <item>The date and time SHALL be represented in the <see cref="System.DateTime"/> Data Type format (e.g., “2002-05-24T16:49:00-07:00” for 24 May 2002 at 16: 49 PDT).</item>
        /// <item>Alphabetic timezone designators such as “Z” MUST NOT be used.  The timezone for UTC MUST be represented as “-00:00”.</item>
        /// </list>
        /// </remarks>
        public System.DateTime onset
        {
            get
            {
                return this.onsetField;
            }
            set
            {
                this.onsetField = value;
            }
        }

        /// <summary>
        /// The expiry time of the information of the alert message (OPTIONAL).
        /// </summary>
        /// <remarks>
        /// <list type="number">
        /// <item>The date and time SHALL be represented in the <see cref="System.DateTime"/> Data Type
        /// format (e.g., “2002-05-24T16:49:00-07:00” for 24 May 2002 at 16: 49 PDT).</item>
        /// <item>Alphabetic timezone designators such as “Z” MUST NOT be used. The timezone for UTC MUST be represented as “-00:00”.</item>
        /// <item>If this item is not provided, each recipient is free to set its own policy as to when the message is no longer in effect.</item>
        /// </list>
        /// </remarks>
        public System.DateTime expires
        {
            get
            {
                return this.expiresField;
            }
            set
            {
                this.expiresField = value;
            }
        }

        /// <summary>
        /// The text naming the originator of the alert message (OPTIONAL).
        /// </summary>
        /// <remarks>
        /// The human-readable name of the agency or authority issuing this alert.
        /// </remarks>
        public string senderName
        {
            get
            {
                return this.senderNameField;
            }
            set
            {
                this.senderNameField = value;
            }
        }

        /// <summary>
        /// The text headline of the alert message (OPTIONAL).
        /// </summary>
        /// <remarks>
        /// A brief human-readable headline. Note that some displays (for example, short messaging service devices) may only present this headline; it SHOULD be made as direct and actionable as possible while remaining short. 160 characters MAY be a useful target limit for headline length.
        /// </remarks>
        public string headline
        {
            get
            {
                return this.headlineField;
            }
            set
            {
                this.headlineField = value;
            }
        }

        /// <summary>
        /// The text describing the subject event of the alert message (OPTIONAL).
        /// </summary>
        /// <remarks>
        /// An extended human readable description of the hazard or event that occasioned this message.
        /// </remarks>
        public string description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }

        /// <summary>
        /// The text describing the recommended action to be taken by recipients of the alert message (OPTIONAL).
        /// </summary>
        /// <remarks>
        /// An extended human readable instruction to targeted recipients.  If different instructions are intended
        /// for different recipients, they should be represented by use of multiple <see cref="alertInfo"/> blocks.
        /// </remarks>
        public string instruction
        {
            get
            {
                return this.instructionField;
            }
            set
            {
                this.instructionField = value;
            }
        }

        /// <summary>
        /// The identifier of the hyperlink associating additional information with the alert message (OPTIONAL).
        /// </summary>
        /// <remarks>
        /// A full, absolute URI for an HTML page or other text resource with additional or reference information regarding this alert.
        /// </remarks>
        [System.Xml.Serialization.XmlElementAttribute(DataType = "anyURI")]
        public string web
        {
            get
            {
                return this.webField;
            }
            set
            {
                this.webField = value;
            }
        }

        /// <summary>
        /// The text describing the contact for follow-up and confirmation of the alert message (OPTIONAL).
        /// </summary>
        public string contact
        {
            get
            {
                return this.contactField;
            }
            set
            {
                this.contactField = value;
            }
        }

        /// <summary>
        /// A system-specific additional parameter associated with the alert message (OPTIONAL).
        /// </summary>
        /// <remarks>
        /// <list type="number">
        /// <item>Any system-specific datum, in the form:
        /// <![CDATA[
        /// <parameter>
        ///     <valueName>valueName</valueName>
        ///     <value>value</value>
        /// </parameter>
        /// ]]>
        /// where the content of “valueName” is a user-assigned string designating the domain of the code,
        /// and the content of “value” is a string (which may represent a number) denoting the value itself 
        /// (e.g., valueName = "SAME" and value = "CIV").</item>
        /// <item>Values of “valueName” that are acronyms SHOULD be represented in all capital letters without periods (e.g., SAME, FIPS, ZIP).</item>
        /// <item>Multiple instances MAY occur within an <see cref="alertInfo"/>> block.</item>
        /// </list>
        /// </remarks>
        [System.Xml.Serialization.XmlElementAttribute("parameter")]
        public alertInfoParameter[] parameter
        {
            get
            {
                return this.parameterField;
            }
            set
            {
                this.parameterField = value;
            }
        }

        /// <summary>
        /// A collection of the <see cref="alertInfoResource"/> related to this
        /// <see cref="alertInfo"/>.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("resource")]
        public alertInfoResource[] resource
        {
            get
            {
                return this.resourceField;
            }
            set
            {
                this.resourceField = value;
            }
        }

        /// <summary>
        /// A collection of the <see cref="alertInfoArea"/> to locate geographically
        /// the <see cref="alertInfo"/>.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("area")]
        public alertInfoArea[] area
        {
            get
            {
                return this.areaField;
            }
            set
            {
                this.areaField = value;
            }
        }
    }
    /// <summary>
    /// Available values for <see cref="alertInfo.category"/>. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:oasis:names:tc:emergency:cap:1.2")]
    [JsonConverter(typeof(StringEnumConverter))]
    public enum alertInfoCategory
    {
        /// <summary>
        /// Geophysical including landslide.
        /// </summary>
        Geo,
        /// <summary>
        /// Meteorological including flood.
        /// </summary>
        Met,
        /// <summary>
        /// General emergency and public safety
        /// </summary>
        Safety,
        /// <summary>
        /// Law enforcement, military, homeland and local/private security
        /// </summary>
        Security,
        /// <summary>
        /// Rescue and recovery
        /// </summary>
        Rescue,
        /// <summary>
        /// Fire suppression and rescue
        /// </summary>
        Fire,
        /// <summary>
        /// Medical and public health
        /// </summary>
        Health,
        /// <summary>
        /// Pollution and other environmental
        /// </summary>
        Env,
        /// <summary>
        /// Public and private transportation
        /// </summary>
        Transport,
        /// <summary>
        /// Utility, telecommunication, other non-transport infrastructure
        /// </summary>
        Infra,
        /// <summary>
        /// Chemical, Biological, Radiological, Nuclear or High-Yield Explosive threat or attack
        /// </summary>
        CBRNE,
        /// <summary>
        /// Other events
        /// </summary>
        Other
    }

    /// <summary>
    /// Available values for <see cref="alertInfo.responseType"/>. 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:oasis:names:tc:emergency:cap:1.2")]
    [JsonConverter(typeof(StringEnumConverter))]
    public enum alertInfoResponseType
    {
        /// <summary>
        /// Take shelter in place or per <see cref="alertInfo.instruction"/>
        /// </summary>
        Shelter,
        /// <summary>
        /// Relocate as instructed in the <see cref="alertInfo.instruction"/>
        /// </summary>
        Evacuate,
        /// <summary>
        /// Make preparations per the <see cref="alertInfo.instruction"/>
        /// </summary>
        Prepare,
        /// <summary>
        /// Execute a pre-planned activity identified in <see cref="alertInfo.instruction"/>
        /// </summary>
        Execute,
        /// <summary>
        /// Avoid the subject event as per the <see cref="alertInfo.instruction"/>
        /// </summary>
        Avoid,
        /// <summary>
        /// Attend to information sources as described in <see cref="alertInfo.instruction"/>
        /// </summary>
        Monitor,
        /// <summary>
        /// Evaluate the information in this message.  (This value SHOULD NOT be used in public warning applications.)
        /// </summary>
        Assess,
        /// <summary>
        /// The subject event no longer poses a threat or concern and any follow on action is described in <see cref="alertInfo.instruction"/>
        /// </summary>
        AllClear,
        /// <summary>
        /// No action recommended
        /// </summary>
        None,
    }

    /// <summary>
    /// Possible values for <see cref="alertInfo.urgency"/> plus an undefined value for uninitialized content.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:oasis:names:tc:emergency:cap:1.2")]
    [JsonConverter(typeof(StringEnumConverter))]
    public enum alertInfoUrgency
    {
        /// <summary>
        /// Unitialized content will assume this value.
        /// </summary>
        Undefined,
        /// <summary>
        /// Responsive action SHOULD be taken immediately
        /// </summary>
        Immediate,
        /// <summary>
        /// Responsive action SHOULD be taken soon (within next hour)
        /// </summary>
        Expected,
        /// <summary>
        /// Responsive action SHOULD be taken in the near future
        /// </summary>
        Future,
        /// <summary>
        /// Responsive action is no longer required
        /// </summary>
        Past,
        /// <summary>
        /// Urgency not known
        /// </summary>
        Unknown,
    }

    /// <summary>
    /// Possible values for <see cref="alertInfo.severity"/> plus an undefined value for uninitialized content.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:oasis:names:tc:emergency:cap:1.2")]
    [JsonConverter(typeof(StringEnumConverter))]
    public enum alertInfoSeverity
    {
        /// <summary>
        /// An unitialized content will assume this value.
        /// </summary>
        Undefined,
        /// <summary>
        /// Extraordinary threat to life or property
        /// </summary>
        Extreme,
        /// <summary>
        /// Significant threat to life or property
        /// </summary>
        Severe,
        /// <summary>
        /// Possible threat to life or property
        /// </summary>
        Moderate,
        /// <summary>
        /// Minimal to no known threat to life or property
        /// </summary>
        Minor,
        /// <summary>
        /// Severity unknown
        /// </summary>
        Unknown,
    }

    /// <summary>
    /// Possible values for <see cref="alertInfo.certainty"/> plus the undefined value for uninitialized content.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:oasis:names:tc:emergency:cap:1.2")]
    [JsonConverter(typeof(StringEnumConverter))]
    public enum alertInfoCertainty
    {
        /// <summary>
        /// Unitialized content will assume this value.
        /// </summary>
        Undefined,
        /// <summary>
        /// Determined to have occurred or to be ongoing
        /// </summary>
        Observed,
        /// <summary>
        /// Likely (p more than ~50%)
        /// </summary>
        Likely,
        /// <summary>
        /// Possible but not likely (p less or equal to ~50%)
        /// </summary>
        Possible,
        /// <summary>
        /// Not expected to occur (p ~ 0)
        /// </summary>
        Unlikely,
        /// <summary>
        /// Certainty unknown
        /// </summary>
        Unknown,
    }

    /// <summary>
    /// The event code is used as a system-specific code identifying the event type of the alert
    /// message.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:oasis:names:tc:emergency:cap:1.2")]
    public partial class alertInfoEventCode
    {
        private string valueNameField;

        private string valueField;

        /// <summary>
        /// Acronyms SHOULD be represented in all capital letters without periods (e.g., SAME, FIPS, ZIP).
        /// </summary>
        public string valueName
        {
            get
            {
                return this.valueNameField;
            }
            set
            {
                this.valueNameField = value;
            }
        }

        /// <summary>
        /// Any context specific value in text format.
        /// </summary>
        public string value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }
    }

    /// <summary>
    /// Used for any system-specific additional parameter associated with the alert message
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:oasis:names:tc:emergency:cap:1.2")]
    [DebuggerDisplay("{valueName}: {value}")]
    public partial class alertInfoParameter
    {
        private string valueNameField;

        private string valueField;

        /// <summary>
        /// Acronyms SHOULD be represented in all capital letters without periods (e.g., SAME, FIPS, ZIP).
        /// </summary>
        public string valueName
        {
            get
            {
                return this.valueNameField;
            }
            set
            {
                this.valueNameField = value;
            }
        }

        /// <summary>
        /// Any context specific value in text format.
        /// </summary>
        public string value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }
    }

    /// <summary>
    /// It is used to refer to an additional file with supplemental information related to this <see cref="alertInfo"/> element; e.g., an image or audio file.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:oasis:names:tc:emergency:cap:1.2")]
    public class alertInfoResource
    {
        private string resourceDescField;

        private string mimeTypeField;

        private string sizeField;

        private string uriField;

        private string derefUriField;

        private string digestField;

        /// <summary>
        /// The text describing the type and content of the resource file (REQUIRED).
        /// </summary>
        /// <remarks>The human-readable text describing the type and content, such as “map” or “photo”, of the resource file.</remarks>
        public string resourceDesc
        {
            get
            {
                return this.resourceDescField;
            }
            set
            {
                this.resourceDescField = value;
            }
        }

        /// <summary>
        /// The identifier of the MIME content type and sub-type describing the resource file (REQUIRED).
        /// </summary>
        /// <remarks>
        /// MIME content type and sub-type as described in [RFC 2046]. (As of this document, the current IANA registered MIME types are listed at http://www.iana.org/assignments/media-types/).
        /// </remarks>
        public string mimeType
        {
            get
            {
                return this.mimeTypeField;
            }
            set
            {
                this.mimeTypeField = value;
            }
        }

        /// <summary>
        /// The integer indicating the size of the resource file (OPTIONAL).
        /// </summary>
        /// <remarks>
        /// <list type="number">
        /// <item>Approximate size of the resource file in bytes.</item>
        /// <item>For <see cref="alertInfoResource.uri"/> based resources, the size SHOULD be included if available.</item>
        /// </list>
        /// </remarks>
        [System.Xml.Serialization.XmlElementAttribute(DataType = "integer")]
        public string size
        {
            get
            {
                return this.sizeField;
            }
            set
            {
                this.sizeField = value;
            }
        }

        /// <summary>
        /// The identifier of the hyperlink for the resource file (OPTIONAL).
        /// </summary>
        /// <remarks>
        /// A full absolute URI, typically a Uniform Resource Locator that can be used to retrieve the resource over the Internet
        /// OR a relative URI to name the content of a <see cref="derefUri"/> element if one is present in this resource.
        /// </remarks>
        [System.Xml.Serialization.XmlElementAttribute(DataType = "anyURI")]
        public string uri
        {
            get
            {
                return this.uriField;
            }
            set
            {
                this.uriField = value;
            }
        }

        /// <summary>
        /// The base-64 encoded data content of the resource file (CONDITIONAL).
        /// </summary>
        /// <remarks>
        /// <list type="number">
        /// <item>
        /// MAY be used either with or instead of the <see cref="uri"/> element in messages transmitted over one-way (e.g., broadcast) data links where retrieval of a resource via a URI is not feasible.</item>
        /// <item>Clients intended for use with one-way data links MUST support this element.</item>
        /// <item>This element MUST NOT be used unless the sender is certain that all direct clients are capable of processing it.</item>
        /// <item>If messages including this element are forwarded onto a two-way network, the forwarder MUST strip the derefUri element and SHOULD extract the file contents and provide a <see cref="uri"/> link to a retrievable version of the file.</item>
        /// <item>Providers of one-way data links MAY enforce additional restrictions on the use of this element, including message-size limits and restrictions regarding file types.</item>
        /// </list>
        /// </remarks>
        public string derefUri
        {
            get
            {
                return this.derefUriField;
            }
            set
            {
                this.derefUriField = value;
            }
        }

        /// <summary>
        /// The code representing the digital digest (“hash”) computed from the resource file (OPTIONAL).
        /// </summary>
        /// <remarks>Calculated using the Secure Hash Algorithm (SHA-1) per [FIPS 180-2].</remarks>
        public string digest
        {
            get
            {
                return this.digestField;
            }
            set
            {
                this.digestField = value;
            }
        }
    }

    /// <summary>
    /// This class is used to assign georeferences to the <see cref="alertInfo"/> of the <see cref="alert"/>
    /// More than one reference can be provided: circles, polygons or locations.
    /// The resulting union of all georeferences is the area affected.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:oasis:names:tc:emergency:cap:1.2")]
    public partial class alertInfoArea
    {
        private string areaDescField;

        private string[] polygonField;

        private string[] circleField;

        private alertInfoAreaGeocode[] geocodeField;

        private decimal altitudeField;

        private decimal ceilingField;

        /// <summary>
        /// The text describing the affected area of the alert message (REQUIRED).
        /// </summary>
        /// <remarks>A text description of the affected area.</remarks>
        public string areaDesc
        {
            get
            {
                return this.areaDescField;
            }
            set
            {
                this.areaDescField = value;
            }
        }

        /// <summary>
        /// The paired values of points defining a polygon that delineates the affected area of the alert message (OPTIONAL).
        /// </summary>
        /// <remarks>
        /// <list type="number">
        /// <item>Code Values: The geographic polygon is represented by a whitespace-delimited list of [WGS 84] coordinate pairs.  (See WGS 84 Note at end of this section)</item>
        /// <item>A minimum of 4 coordinate pairs MUST be present and the first and last pairs of coordinates MUST be the same.</item>
        /// <item>Multiple instances MAY occur within an <see cref="alertInfoArea"/> block</item>
        /// </list>
        /// </remarks>
        [System.Xml.Serialization.XmlElementAttribute("polygon")]
        public string[] polygon
        {
            get
            {
                return this.polygonField;
            }
            set
            {
                this.polygonField = value;
            }
        }

        /// <summary>
        /// The paired values of a point and radius delineating the affected area of the alert message (OPTIONAL).
        /// </summary>
        /// <remarks>
        /// <list type="number">
        /// <item>Code Values: The circular area is represented by a central point given as a [WGS 84] coordinate pair followed by a space character and a radius value in kilometers. (See WGS 84 Note at end of this section)</item>
        /// <item>Multiple instances MAY occur within an <see cref="alertInfoArea"/> block.</item>
        /// </list>
        /// </remarks>
        [System.Xml.Serialization.XmlElementAttribute("circle")]
        public string[] circle
        {
            get
            {
                return this.circleField;
            }
            set
            {
                this.circleField = value;
            }
        }

        /// <summary>
        /// The geographic code delineating the affected area of the alert message (OPTIONAL).
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("geocode")]
        public alertInfoAreaGeocode[] geocode
        {
            get
            {
                return this.geocodeField;
            }
            set
            {
                this.geocodeField = value;
            }
        }

        /// <summary>
        /// The specific or minimum altitude of the affected area of the alert message (OPTIONAL).
        /// </summary>
        /// <remarks>
        /// <list type="number">
        /// <item>If used with the <see cref="ceiling"/> element this value is the lower limit of a range. Otherwise, this value specifies a specific altitude.</item>
        /// <item>The altitude measure is in feet above mean sea level per the [WGS 84] datum.</item>
        /// </list>
        /// </remarks>
        public decimal altitude
        {
            get
            {
                return this.altitudeField;
            }
            set
            {
                this.altitudeField = value;
            }
        }

        /// <summary>
        /// The maximum altitude of the affected area of the alert message (CONDITIONAL).
        /// </summary>
        /// <remarks>
        /// <item>MUST NOT be used except in combination with the <see cref="altitude"/> element.</item>
        /// <item>The ceiling measure is in feet above mean sea level per the [WGS 84] datum.</item>
        /// </remarks>
        public decimal ceiling
        {
            get
            {
                return this.ceilingField;
            }
            set
            {
                this.ceilingField = value;
            }
        }
    }

    /// <summary>
    /// A class to represent the geographically-based code describing an affected area.
    /// </summary>
    /// <remarks>
    /// <list type="number">
    /// <item>Any geographically-based code to describe a message target area, in the form:
    /// <![CDATA[
    /// <geocode>
    ///     <valueName>valueName</valueName>
    ///     <value>value</value>
    /// </geocode>
    /// ]]>
    /// where the content of “valueName” is a user-assigned string designating the domain of the code,
    /// and the content of “value” is a string (which may represent a number) denoting the value itself 
    /// (e.g., valueName = "SAME" and value = "006113").</item>
    /// <item>Values of “valueName” that are acronyms SHOULD be represented in all capital letters without periods (e.g., SAME, FIPS, ZIP).</item>
    /// <item>Multiple instances MAY occur within an <see cref="alertInfoArea"/> block.</item>
    /// <item>This element is primarily for compatibility with other systems. Use of this element presumes knowledge of the coding system on the
    /// part of recipients; therefore, for interoperability, it SHOULD be used in concert with an equivalent description in the more universally
    /// understood <see cref="alertInfoArea.polygon"/> and <see cref="alertInfoArea.circle"/> forms whenever possible.</item>
    /// </list>
    /// </remarks>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:oasis:names:tc:emergency:cap:1.2")]
    public partial class alertInfoAreaGeocode
    {
        private string valueNameField;

        private string valueField;

        /// <summary>
        /// Acronyms SHOULD be represented in all capital letters without periods (e.g., SAME, FIPS, ZIP).
        /// </summary>
        public string valueName
        {
            get
            {
                return this.valueNameField;
            }
            set
            {
                this.valueNameField = value;
            }
        }

        /// <summary>
        /// Any context specific value in text format.
        /// </summary>
        public string value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }
    }
}
